# Prompt configuration
# Modify the prompt to contain git branch name if applicable
git_info() {
  current_branch=$(git current-branch 2> /dev/null)
  if [[ -n $current_branch ]]; then
    echo " %{$fg_bold[green]%}$current_branch%{$reset_color%}"
  fi
}

# Enable prompt substitution
setopt promptsubst

# Set our prompt substitution
export PS1='${SSH_CONNECTION+"%{$fg_bold[green]%}%n@%m:"}%{$fg_bold[blue]%}%c%{$reset_color%}$(git_info) %#'

# Set our zsh theme
ZSH_THEME="candy"

# Set some var paths for easy access later
export ZSH=$HOME/.oh-my-zsh
export PATH="$HOME/.bin:$HOME/.rbenv/bin:$PATH"

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set zshell custom dir
ZSH_CUSTOM=$HOME/.oh-my-zsh-custom

# Source oh-my-zsh
source $ZSH/oh-my-zsh.sh

# rbenv setup
eval "$(rbenv init -)"

# Source nvm setup
. ~/.nvm/nvm.sh

# Setup RVM
#export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

# Setup jenv for managing java versions
export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

# Make jruby use drip
# https://github.com/ninjudd/drip/wiki/JRuby
export JAVACMD=$(which drip)
export DRIP_INIT_CLASS=org.jruby.main.DripMain
export DRIP_INIT=""
export JRUBY_OPTS="-J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify" 

# Autojump / Fish / Ack
[[ -f ~/.addon-config.local ]] && source ~/.addon-config.local

# Setup Go
export PATH="$PATH:$HOME/Scratch/GOTESTS/bin" # Add RVM to PATH for scripting
export GOPATH=/Users/afaur/Scratch/GOTESTS

# Setup Haskell
export PATH="$HOME/Library/Haskell/bin:$PATH"

# Setup OCaml - OPAM configuration
. /Users/afaur/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# ls replacement exa
alias l="exa --git --long -h"

# Debugging cargo issue
alias cargo-get="while cargo run; do :; done"

# VIM
alias v="vim -w ~/vimlog"
alias v.="vim -w ~/vimlog ."

# TMUX
export DISABLE_AUTO_TITLE='true'
alias tm="tmuxp load ~/tmux.yaml"

# NESH
alias esrepl="nesh -b -e"
alias csrepl="nesh -c -e"

# Setup docker machine settings for default
eval $(docker-machine env default)

# Configure Docker CLI
function dvm {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: dvm machine"
    echo "The following docker machines are setup on your system:"
    docker-machine ls
  else
    # Start the machine
    docker-machine start "$1" > /dev/null 2> /dev/null || true

    # See if we can get the env for that machine
    eval "$(docker-machine env $1)" > /dev/null 2> /dev/null || true

    # Run command by itself to check if ran successfully
    docker-machine env $1 > /dev/null 2> /dev/null

    if [ $? -ne 0 ]; then
      echo "Machine doesn't exist"
    else
      echo "You are now controlling machine: $1"
      echo "Any docker commands you run will be against that machine."
    fi

  fi
}

# Setup default docker
dvm default

# Find all sym links
alias symfind="find . -maxdepth 1 -type l -exec echo {} \;"

# Util for quick file extraction
function extract {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ] ; then
        NAME=${1%.*}
        #mkdir $NAME && cd $NAME
        case "$1" in
          *.tar.bz2)   tar xvjf ./"$1"    ;;
          *.tar.gz)    tar xvzf ./"$1"    ;;
          *.tar.xz)    tar xvJf ./"$1"    ;;
          *.lzma)      unlzma ./"$1"      ;;
          *.bz2)       bunzip2 ./"$1"     ;;
          *.rar)       unrar x -ad ./"$1" ;;
          *.gz)        gunzip ./"$1"      ;;
          *.tar)       tar xvf ./"$1"     ;;
          *.tbz2)      tar xvjf ./"$1"    ;;
          *.tgz)       tar xvzf ./"$1"    ;;
          *.zip)       unzip ./"$1"       ;;
          *.Z)         uncompress ./"$1"  ;;
          *.7z)        7z x ./"$1"        ;;
          *.xz)        unxz ./"$1"        ;;
          *.exe)       cabextract ./"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "'$1' - file does not exist"
    fi
  fi
}


